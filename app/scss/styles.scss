$primaryColor: orange;

$theme: 'white';

/**
  Listes
 */
$list: banane, poire, peche, angular;
// Rajouter dynamiquement une valeur à une liste
$fruit: pomme;
// Ajoute la variable fruit à la list avec le séparateur virgule
$list: append($list, $fruit, comma);
// Même chose en indiquant directement la valeur à ajouter
$list: append($list, "prune", comma);

/**
  Map
 */
$default: ( color: blue, font-size: 1em );


// Importe la feuille de style _header.scss pas besoin de mettre le _
@import 'header';

// Il faut déclarer une mixin AVANT de l'utiliser
@mixin googleFonts($font) {
  @import url('https://fonts.googleapis.com/css2?family=#{$font}');
}

// Fonts
// Déclare la police (font) Roboto de google pour l'utiliser plus bas
@include googleFonts(Roboto);
@include googleFonts('Noto+Sans+TC');

// mixin avec paramètre $degres
@mixin border-radius($degres) {
  -moz-border-radius: $degres;
  -webkit-border-radius: $degres;
  border-radius: $degres;
}

%theme {
  @if ($theme == "purple") {
    color: purple;
    background-color: white;
  } @else if ($theme == "white") {
    color: black;
    background-color: white;
  } @else if ($theme == "black") {
    color: white;
    background-color: black;
  } @else {
    color: blue;
    background-color: gray;
  }
}

// Définition d'une fonction non native (à définir avant d'appeler)
@function fonctionTest($nombreA, $nombreB) {
  @return $nombreA / $nombreB + $nombreA;
}

body {
  @extend %theme;
}

footer {
  padding: 50px;
  font-family: 'Roboto', sans-serif;
  background-color: $primaryColor;
  // Appel de la mixin avec précision du paramètre
  @include border-radius(40px);
  // Appel de fonction
  content: fonctionTest(15, 3);

  // Permet de remettre le h1 à la base du css malgré l'héritage
  @at-root {
    h1 {
      color: blue;
    }
  }

  // Les spans inclus dans le footer
  span {
    color: aliceblue;
    // Récupère le premier indexe de la liste
    content: nth($list, 1);
    // le & permet de ne pas répéter le span (correspond au this)
    &:hover {
      text-decoration: underline;
    }
  }
}

// Le % permet de faire hériter un bloc de propriétés
// à utiliser quand il n'y a pas de paramètres
%alert {
  border: 1px solid #ccc;
  padding: 15px;
  color: white;
  @include border-radius(10px);
}

.alert-green {
  // le @extend permet d'inclure un bloc de propriétés
  @extend %alert;
  background-color: green;
}
.alert-red {
  @extend %alert;
  font-family: 'Noto+Sans+TC', sans-serif;
  background-color: red;
}

// Bloc de prorpiétéS que l'on peut appeler permet d'utiliser des paramètres
@mixin center {
  margin-left: auto;
  margin-right: auto;
}

#logo {
  width: 135px;
  // Pour récupérer les valeurs de la map
  color: map-get($default, color);
  // @include permet d'importer une mixin
  @include center;
}

#slogan {
  width: 150px;
  @include center;
}

$i: 0;

@while $i <= 6 {
  .grid-#{$i} {
    width: 100px*$i;
  }
  $i: $i + 1;
}

// Il faut préciser la valeur de départ et celle d'arriver
@for $i from 1 through 6 {
  // #{$i} permet d'ajouter des variables à l'id
  .grid-#{$i} {
    width: 100px*$i;
  }
}

// $list est une liste de valeurs
@each $name in $list {
  .#{$name}-icon {
    // il faut avoir l'image dans le dossier pour pouvoir l'appeler
    background-image: url('../images/#{$name}.png');
    background-repeat: no-repeat;
    width: 250px;
    height: 200px;
    padding: 0;
  }
}

$color-map: ( rouge: red, vert: green, violet: purple, gris: grey, bleue: blue );
// each avec une map
@each $key, $value in $color-map {
  .couleur-#{$key} {
    color: #{$value};
  }
}

//@each $key, $value in $color-map {
//  .couleur-$key {
//    color: $value;
//  }
//}



